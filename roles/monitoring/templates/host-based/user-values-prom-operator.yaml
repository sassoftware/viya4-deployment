prometheus:
  # Disable default configuration of NodePort
  service:
    type: ClusterIP
    nodePort: null
  # Define host-based ingress
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    enabled: true
    ingressClassName: nginx
    tls:
    - hosts:
      - {{ V4M_PROMETHEUS_FQDN }}
      secretName: prometheus-ingress-tls-secret
    hosts:
    - {{ V4M_PROMETHEUS_FQDN }}
  prometheusSpec:
    externalUrl: "https://{{ V4M_PROMETHEUS_FQDN }}"
    alertingEndpoints:
      - name: v4m-alertmanager
        port: http-web
        scheme: https
        tlsConfig:
          insecureSkipVerify: true
    storageSpec:
      volumeClaimTemplate:
        spec:
         storageClassName: {{ V4M_STORAGECLASS }}

alertmanager:
  # Disable default configuration of NodePort
  service:
    type: ClusterIP
    nodePort: null
  # Define host-based ingress
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    ingressClassName: nginx
    enabled: true
    tls:
    - hosts:
      - {{ V4M_ALERTMANAGER_FQDN }}
      secretName: alertmanager-ingress-tls-secret
    hosts:
    - {{ V4M_ALERTMANAGER_FQDN  }}
  alertmanagerSpec:
    externalUrl: "https://{{ V4M_ALERTMANAGER_FQDN }}"
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ V4M_STORAGECLASS }}

grafana:
  # Disable default configuration of NodePort
  service:
    type: ClusterIP
    nodePort: null
  # Define host-based ingress
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    enabled: true
    ingressClassName: nginx
    tls:
    - hosts:
      - {{ V4M_GRAFANA_FQDN }}
      secretName: grafana-ingress-tls-secret
    hosts:
    - {{ V4M_GRAFANA_FQDN }}
    path: /
  "grafana.ini":
    server:
      domain: {{ V4M_BASE_DOMAIN }}
      root_url: "https://{{ V4M_GRAFANA_FQDN }}"
      serve_from_sub_path: false
  testFramework:
    enabled: false
  persistence:
    storageClassName: {{ V4M_STORAGECLASS }}
