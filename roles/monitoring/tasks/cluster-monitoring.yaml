---
- name: cluster-monitoring - create userdir
  file:
    path: "{{ tmpdir.path }}/monitoring/"
    state: directory
    mode: "0770"
  tags:
    - install
    - uninstall
    - update

- name: cluster-monitoring - lookup existing credentials
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: v4m-grafana
    namespace: "{{ V4M_MONITORING_NAMESPACE }}"
    kubeconfig: "{{ KUBECONFIG }}"
  register: monitoring_creds
  tags:
    - install
    - update

- name: cluster-monitoring - save credentials
  set_fact:
    V4M_GRAFANA_PASSWORD: "{{ monitoring_creds.resources[0].data['admin-password']|b64decode }}"
  tags:
    - install
    - update
  when:
    - (monitoring_creds.resources | length) == 1

- name: cluster-monitoring - output credentials
  debug:
    msg: 
      - "Grafana - username: admin, password: {{ V4M_GRAFANA_PASSWORD }}"
  tags:
    - install

- name: cluster-monitoring - user values
  template:
    src: "user-values-prom-operator.yaml"
    dest: "{{ tmpdir.path }}/monitoring/user-values-prom-operator.yaml"
    mode: "0660"
  tags:
    - install
    - update
    - uninstall

- name: cluster-monitoring - deploy
  command:
    cmd: "{{ tmpdir.path }}/viya4-monitoring-kubernetes/monitoring/bin/deploy_monitoring_cluster.sh"
  environment: "{{ monitoring_env }}"
  tags:
    - install
    - update

- name: cluster-monitoring - grafana cert
  community.kubernetes.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "grafana-ingress-tls-secret"
        namespace: "{{ V4M_MONITORING_NAMESPACE }}"
      data:
        tls.crt: >-
          {{ lookup('file', V4M_GRAFANA_CERT ) |b64encode }}
        tls.key: >-
          {{ lookup('file', V4M_GRAFANA_KEY ) |b64encode }}
      type: kubernetes.io/tls
  when: 
    - V4M_GRAFANA_CERT is not none
    - V4M_GRAFANA_KEY is not none
  tags:
    - install
    - update

- name: cluster-monitoring - prometheus cert
  community.kubernetes.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "prometheus-ingress-tls-secret"
        namespace: "{{ V4M_MONITORING_NAMESPACE }}"
      data:
        tls.crt: >-
          {{ lookup('file', V4M_PROMETHEUS_CERT ) |b64encode }}
        tls.key: >-
          {{ lookup('file', V4M_PROMETHEUS_KEY ) |b64encode }}
      type: kubernetes.io/tls
  when: 
    - V4M_PROMETHEUS_CERT is not none
    - V4M_PROMETHEUS_KEY is not none
  tags:
    - install
    - update

- name: cluster-monitoring - alertmanager cert
  community.kubernetes.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "alertmanager-ingress-tls-secret"
        namespace: "{{ V4M_MONITORING_NAMESPACE }}"
      data:
        tls.crt: >-
          {{ lookup('file', V4M_ALERTMANAGER_CERT ) |b64encode }}
        tls.key: >-
          {{ lookup('file', V4M_ALERTMANAGER_CERT ) |b64encode }}
      type: kubernetes.io/tls
  when: 
    - V4M_ALERTMANAGER_CERT is not none
    - V4M_ALERTMANAGER_KEY is not none
  tags:
    - install
    - update

- name: cluster-monitoring - uninstall
  command:
    cmd: "{{ tmpdir.path }}/viya4-monitoring-kubernetes/monitoring/bin/remove_monitoring_cluster.sh"
  environment: "{{ monitoring_env }}"
  tags:
    - uninstall

- name: cluster-monitoring - delete namespace
  community.kubernetes.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ V4M_MONITORING_NAMESPACE }}"
    wait: true
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
  tags:
    - uninstall
