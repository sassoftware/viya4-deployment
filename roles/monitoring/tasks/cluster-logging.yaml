---
- name: cluster-logging - create userdir
  file:
    path: "{{ tmpdir.path }}/logging/"
    state: directory
    mode: "0770"
  tags:
    - install
    - uninstall
    - update

- name: cluster-logging - lookup existing credentials
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ V4M_LOGGING_NAMESPACE }}"
    kubeconfig: "{{ KUBECONFIG }}"
    label_selectors:
      - managed-by = v4m-es-script
  register: "logging_secrets"
  tags:
    - install

- name: Set password facts
  set_fact:
    V4M_KIBANA_PASSWORD: "{{ V4M_KIBANA_PASSWORD }}"
    V4M_KIBANA_LOGADM_PASSWORD: "{{ V4M_KIBANA_LOGADM_PASSWORD }}"
    V4M_KIBANASERVER_PASSWORD: "{{ V4M_KIBANASERVER_PASSWORD }}"
    V4M_LOGCOLLECTOR_PASSWORD: "{{ V4M_LOGCOLLECTOR_PASSWORD }}" 
    V4M_METRICGETTER_PASSWORD: "{{ V4M_METRICGETTER_PASSWORD }}" 
  tags:
    - install

- name: cluster-logging - save credentials
  set_fact: 
    "{{ logging_map['secret'][item.metadata.name] }}": "{{ item.data.password|b64decode }}"
  with_items: "{{ logging_secrets.resources }}"
  when:
    - item.metadata is defined
    - item.metadata.name is defined
    - item.metadata.name in ("internal-user-admin", "internal-user-logadm", "internal-user-kibanaserver", "internal-user-logcollector", "internal-user-metricgetter")
  tags:
    - install

- name: cluster-logging - output credentials
  debug:
    msg:
      - "OpenSearch admin  - username: admin,                   password: {{ V4M_KIBANA_PASSWORD }}"
      - "OpenSearch admin  - username: logadm,                  password: {{ V4M_KIBANA_LOGADM_PASSWORD }}"
  tags:
    - install

- name: cluster-logging - opensearch user values
  template:
    src: "user-values-elasticsearch-opensearch.yaml"
    dest: "{{ tmpdir.path }}/logging/user-values-opensearch.yaml"
    mode: "0660"
  tags:
    - install
    - update
    - uninstall

- name: cluster-logging - osd user values
  template:
    src: "user-values-osd-opensearch.yaml"
    dest: "{{ tmpdir.path }}/logging/user-values-osd.yaml"
    mode: "0660"
  tags:
    - install
    - update
    - uninstall

- name: cluster-logging - deploy
  command:
    cmd: "{{ tmpdir.path }}/viya4-monitoring-kubernetes/logging/bin/deploy_logging.sh"
  environment: "{{ logging_map['env'] }}"
  tags:
    - install
    - update

- name: cluster-logging - elasticsearch cert
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "elasticsearch-ingress-tls-secret"
        namespace: "{{ V4M_LOGGING_NAMESPACE }}"
      data:
        tls.crt: >-
          {{ lookup('file', V4M_ELASTICSEARCH_CERT ) |b64encode }}
        tls.key: >-
          {{ lookup('file', V4M_ELASTICSEARCH_KEY ) |b64encode }}
      type: kubernetes.io/tls
  when: 
    - V4M_ELASTICSEARCH_CERT is not none
    - V4M_ELASTICSEARCH_KEY is not none
  tags:
    - install
    - update

- name: cluster-logging - kibana cert
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: "kibana-ingress-tls-secret"
        namespace: "{{ V4M_LOGGING_NAMESPACE }}"
      data:
        tls.crt: >-
          {{ lookup('file', V4M_KIBANA_CERT ) |b64encode }}
        tls.key: >-
          {{ lookup('file', V4M_KIBANA_KEY ) |b64encode }}
      type: kubernetes.io/tls
  when: 
    - V4M_KIBANA_CERT is not none
    - V4M_KIBANA_KEY is not none
  tags:
    - install
    - update

- name: cluster-logging - uninstall
  command:
    cmd: "{{ tmpdir.path }}/viya4-monitoring-kubernetes/logging/bin/remove_logging.sh"
  environment: "{{ logging_map['env'] }}"
  tags:
    - uninstall

- name: cluster-logging - delete namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ V4M_LOGGING_NAMESPACE }}"
    wait: true
    wait_timeout: 600
    kubeconfig: "{{ KUBECONFIG }}"
    state: absent
  tags:
    - uninstall
