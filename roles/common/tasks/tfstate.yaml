- block:
    - name: Get tf output
      command: "terraform output -json -state {{ TFSTATE }}"
      register: output
    - name: Parse Terraform state
      set_fact:
        tfstate_data: "{{ output.stdout|from_json }}"
    - name: Add nat ip to LOADBALANCER_SOURCE_RANGES
      lineinfile:
        path: "{{ CONFIG }}"
        line: "LOADBALANCER_SOURCE_RANGES: {{LOADBALANCER_SOURCE_RANGES + [tfstate_data.nat_ip.value+'/32'] }}"
        regexp: "^LOADBALANCER_SOURCE_RANGES:"
        unsafe_writes: yes
      when: 
        - tfstate_data.nat_ip is defined
        - LOADBALANCER_SOURCE_RANGES is defined
        - (tfstate_data.nat_ip.value+'/32') not in LOADBALANCER_SOURCE_RANGES
    - name: Add nfs endpoint
      lineinfile:
        path: "{{ CONFIG }}"
        line: "V4_CFG_NFS_SVR_HOST: {{ tfstate_data.rwx_filestore_endpoint.value }}"
        regexp: "^V4_CFG_NFS_SVR_HOST:"
        unsafe_writes: yes
      when: 
        - tfstate_data.rwx_filestore_endpoint is defined
    - name: Add nfs path
      lineinfile:
        path: "{{ CONFIG }}"
        line: "V4_CFG_NFS_SVR_PATH: {{ tfstate_data.rwx_filestore_path.value }}"
        regexp: "^V4_CFG_NFS_SVR_PATH:"
        unsafe_writes: yes
      when: 
        - tfstate_data.rwx_filestore_path is defined
    - name: Create tmp kubeconfig
      tempfile:
        state: file
      register: tmp_kubeconfig
      when:
        - tfstate_data.kube_config is defined
    - name: Export kubeconfig
      copy:
        dest: "{{tmp_kubeconfig.path}}"
        content: |
          {{ tfstate_data.kube_config.value }}
      when:
        - tfstate_data.kube_config is defined
    - name: Set KUBE var
      set_fact:
        KUBE: "{{ tmp_kubeconfig.path }}"
      when:
        - tfstate_data.kube_config is defined
    - name: Add Provider
      lineinfile:
        path: "{{ CONFIG }}"
        line: "PROVIDER: {{ tfstate_data.provider.value }}"
        regex: "^PROVIDER:"
        unsafe_writes: yes
      when:
        - tfstate_data.provider is defined
    - name: Add Provider Account
      lineinfile:
        path: "{{ CONFIG }}"
        line: "PROVIDER_ACCOUNT: {{ tfstate_data.provider_account.value }}"
        regex: "^PROVIDER_ACCOUNT:"
        unsafe_writes: yes
      when:
        - tfstate_data.provider_account is defined
    - name: Add Cluster Name
      lineinfile:
        path: "{{ CONFIG }}"
        line: "CLUSTER_NAME: {{ tfstate_data.cluster_name.value }}"
        regex: "^CLUSTER_NAME:"
        unsafe_writes: yes
      when:
        - tfstate_data.cluster_name is defined
    - name: Add Postgres Admin
      lineinfile:
        path: "{{ CONFIG }}"
        line: "V4_CFG_POSTGRES_ADMIN_LOGIN: {{ tfstate_data.postgres_admin.value + '@' + tfstate_data.postgres_server_name.value }}"
        regex: "^V4_CFG_POSTGRES_ADMIN_LOGIN:"
        unsafe_writes: yes
      when:
        - V4_CFG_POSTGRES_TYPE is defined
        - V4_CFG_POSTGRES_TYPE == "external"
        - tfstate_data.postgres_admin is defined
        - tfstate_data.postgres_server_name is defined
    - name: Add Postgres Password
      lineinfile:
        path: "{{ CONFIG }}"
        line: "V4_CFG_POSTGRES_PASSWORD: {{ tfstate_data.postgres_password.value }}"
        regex: "^V4_CFG_POSTGRES_PASSWORD:"
        unsafe_writes: yes
      when:
        - V4_CFG_POSTGRES_TYPE is defined
        - V4_CFG_POSTGRES_TYPE == "external"
        - tfstate_data.postgres_password is defined
    - name: Add Postgres FQDN
      lineinfile:
        path: "{{ CONFIG }}"
        line: "V4_CFG_POSTGRES_FQDN: {{ tfstate_data.postgres_fqdn.value }}"
        regex: "^V4_CFG_POSTGRES_FQDN:"
        unsafe_writes: yes
      when:
        - V4_CFG_POSTGRES_TYPE is defined
        - V4_CFG_POSTGRES_TYPE == "external"
        - tfstate_data.postgres_fqdn is defined 
    - name: Add Jump Server
      lineinfile:
        path: "{{ CONFIG }}"
        line: "JUMP_SVR_HOST: {{ tfstate_data.jump_public_ip.value }}"
        regex: "^JUMP_SVR_HOST:"
        unsafe_writes: yes
      when:
        - tfstate_data.jump_public_ip is defined
    - name: Add Jump User
      lineinfile:
        path: "{{ CONFIG }}"
        line: "JUMP_SVR_USER: {{ tfstate_data.jump_admin_username.value }}"
        regex: "^JUMP_SVR_USER:"
        unsafe_writes: yes
      when:
        - tfstate_data.jump_admin_username is defined
    - name: Create tmp ssh private key
      tempfile:
        state: file
      register: tmp_ssh
      when:
        - tfstate_data.jump_private_key_pem is defined
    - name: Export Jump Private Key
      copy:
        content: "{{ tfstate_data.jump_private_key_pem.value }}"
        dest: "{{tmp_ssh.path}}"
      when:
        - tfstate_data.jump_private_key_pem is defined
    - name: set jump private key var
      set_fact:
        JUMP_SVR_PRIVATE_KEY: "{{tmp_ssh.path}}"
      when:
        - tfstate_data.jump_private_key_pem is defined 
    - name: reload config
      include_vars:
        file: "{{ CONFIG }}"
  tags:
    - baseline
    - vdm
    - cluster-monitoring
    - cluster-logging
    - viya-monitoring
