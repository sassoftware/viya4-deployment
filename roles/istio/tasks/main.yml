# Copyright © 2020-2025, SAS Institute Inc., Cary, NC, USA. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

---
# This file contains the main tasks for the istio role.
# It handles downloading Istio, creating the namespace, setting secrets, installing Istio, configuring ingress, and cleanup.
# Each block is conditionally included based on configuration variables and tags.

# Name: istio
# Chart URL: https://github.com/istio/istio/releases
# Purpose: Service mesh for traffic management, security, and observability.

# Download the specified version of Istio for the target architecture
- name: Download istio
  shell: 
    cmd: "curl -L https://istio.io/downloadIstio | ISTIO_VERSION={{ istio_ver }} TARGET_ARCH={{ target_arch }} sh -"
    chdir: "{{ tmpdir.path }}"
  tags:
    - install
    - uninstall
    - update

# Create the istio-system namespace in Kubernetes
- name: Create namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    api_version: v1
    kind: Namespace
    name: "istio-system"
    wait: true
  tags:
    - install
    - update

# Set the Kiali secret using a template
- name: Set kiali secret
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition: "{{ lookup('template', 'kiali-secret.yaml') }}"
  tags:
    - install
    - update

# Set the Grafana secret using a template
- name: Set grafana secret
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition: "{{ lookup('template', 'grafana-secret.yaml') }}"
  tags:
    - install
    - update

# Install base Istio using istioctl and the provided config
- name: Install base Istio 
  command: "{{ tmpdir.path }}/istio-{{ istio_ver }}/bin/istioctl --kubeconfig {{ KUBECONFIG }} manifest apply {{ istio_config }}"
  tags:
    - install
    - update

# Lockdown ingress with an AuthorizationPolicy for allowed source ranges
- name: Lockdown ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: security.istio.io/v1beta1
      kind: AuthorizationPolicy
      metadata:
        name: ingress-policy
        namespace: istio-system
      spec:
        selector:
          matchLabels:
            app: istio-ingressgateway
        action: ALLOW
        rules:
        - from:
          - source:
              ipBlocks: "{{ LOADBALANCER_SOURCE_RANGES }}"
  tags:
    - install
    - update

# Create Grafana ingress if enabled
- name: Grafana ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        annotations:
          kubernetes.io/ingress.class: istio
        name: grafana-ingress
        namespace: istio-system
      spec:
        rules:
          - host: "{{ grafana_ingress_host }}"
            http:
              paths:
                - path: /
                  backend:
                    serviceName: grafana
                    servicePort: 3000
  when: grafana_ingress_enabled
  tags:
    - install
    - update

# Create Prometheus ingress if enabled
- name: Prometheus ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        annotations:
          kubernetes.io/ingress.class: istio
        name: prometheus-ingress
        namespace: istio-system
      spec:
        rules:
          - host: "{{ prometheus_ingress_host }}"
            http:
              paths:
                - path: /
                  backend:
                    serviceName: prometheus
                    servicePort: 9090
  when: prometheus_ingress_enabled
  tags:
    - install
    - update

# Create Kiali ingress if enabled
- name: Kiali ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        annotations:
          kubernetes.io/ingress.class: istio
        name: kiali-ingress
        namespace: istio-system
      spec:
        rules:
          - host: "{{ kiali_ingress_host }}"
            http:
              paths:
                - path: /
                  backend:
                    serviceName: kiali
                    servicePort: 20001
  when: kiali_ingress_enabled
  tags:
    - install
    - update

# Create Tracing ingress if enabled
- name: Tracing ingress
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        annotations:
          kubernetes.io/ingress.class: istio
        name: tracing-ingress
        namespace: istio-system
      spec:
        rules:
          - host: "{{ tracing_ingress_host }}"
            http:
              paths:
                - path: /
                  backend:
                    serviceName: tracing
                    servicePort: 80
  when: tracing_ingress_enabled
  tags:
    - install
    - update

# Lookup the istio-ingressgateway service to get the ingress endpoint
- name: Lookup ingress
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: istio-ingressgateway
    namespace: "istio-system"
    kubeconfig: "{{ KUBECONFIG }}"
  until: "ingress_config.resources[0].status.loadBalancer.ingress is defined and (ingress_config.resources[0].status.loadBalancer.ingress[0].ip is defined or ingress_config.resources[0].status.loadBalancer.ingress[0].hostname is defined)"
  register: ingress_config
  tags:
    - install
    - update
    - uninstall

# Set facts for ingress endpoint and type (IP or DNS)
- set_fact: 
    ingress_endpoint: "{{ ingress_config.resources[0].status.loadBalancer.ingress[0].ip |default(ingress_config.resources[0].status.loadBalancer.ingress[0].hostname, true) }}"
    ingress_type: "{{ 'ip' if (ingress_config.resources[0].status.loadBalancer.ingress[0].ip is defined) else 'dns' }}"
    cacheable: yes
  tags:
    - install
    - update
    - uninstall

# Uninstall base Istio using istioctl and kubectl delete
- name: Uninstall base Istio 
  shell: |
    {{ tmpdir.path }}/istio-{{ istio_ver }}/bin/istioctl --kubeconfig {{ KUBECONFIG }} manifest generate {{ istio_config }} | kubectl delete -f -
  environment:
    KUBECONFIG: "{{ KUBECONFIG }}"
  ignore_errors: true
  tags:
    - uninstall

# Delete the istio-system namespace
- name: Delete namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ KUBECONFIG }}"
    api_version: v1
    kind: Namespace
    name: "istio-system"
    wait: true
    wait_timeout: 600
    state: absent
  ignore_errors: true
  tags:
    - uninstall

# Remove the temporary directory used for Istio installation
- name: Remove tmp_dir
  file:
    path: "{{ tmpdir.path }}"
    state: absent
  tags:
    - install
    - update
    - uninstall
